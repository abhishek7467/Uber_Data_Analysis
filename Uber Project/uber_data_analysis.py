# -*- coding: utf-8 -*-
"""Uber_Data_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b3d_5DGV_kZqC3SObbuWwo55b5oqXXvf

# Uber New York Data Analysis
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import os

import plotly.express as px
import plotly.graph_objects as go

from google.colab import drive
drive.mount('/content/drive')

path = r'/content/drive/MyDrive/Data for Uber'
files = ['uber-raw-data-aug14.csv',
         'uber-raw-data-apr14.csv',
         'uber-raw-data-jul14.csv',
         'uber-raw-data-jun14.csv',
         'uber-raw-data-may14.csv',
         'uber-raw-data-sep14.csv']
final = pd.DataFrame()

for file in files:
    df = pd.read_csv(path+"/"+file,encoding='utf-8')
    final = pd.concat([final,df])

final.shape

"""The files are separated by month and each has the following columns:

*  Date/Time : The date and time of the Uber pickup

*  Lat : The latitude of the Uber pickup

*  Lon : The longitude of the Uber pickup

*  Base : The TLC base company code affiliated with the Uber pickup


*  The globe is split into an imaginary 360 sections from both top to bottom 

---

(north to south) and 180 sections from side to side (west to east). The 


sections running from top to bottom on a globe are called longitude, and the sections running from side to side on a globe are called latitude. Latitude is the measurement of distance north or south of the Equator. Every location on earth has a global address. Because the address is in numbers, people can communicate about location no matter what language they might speak. A global address is given as two numbers called coordinates. The two numbers are a location's latitude number and its longitude number ("Lat/Long").
"""

df = final.copy()
df.head(10)

"""Let's check out data type"""

df.dtypes

"""For the Date/Time collum the data type is object, so we should change the format into datetime using pd.to_datetime()"""

df['Date/Time'] = pd.to_datetime(df['Date/Time'], format='%m/%d/%Y %H:%M:%S')
df.dtypes

"""Now, we were going to add a new collumn to define weekday, day, minute, month, and hour"""

df['weekday']=df['Date/Time'].dt.day_name()
df['day']=df['Date/Time'].dt.day
df['minute']=df['Date/Time'].dt.minute
df['month']=df['Date/Time'].dt.month
df['hour']=df['Date/Time'].dt.hour
df.head()

df.dtypes

colors = ['lightslategray',] * 5
colors[0] = 'crimson'

fig = go.Figure(data=[go.Bar(
    x=df['weekday'].value_counts().index,
    y=df['weekday'].value_counts().values,
    marker_color=colors # marker color can be a single color value or an iterable
)])
fig.update_layout(title_text='Rush Day of Uber Trip')

"""### Exploratory Data and Analysis"""

colors = ['lightslategray',] * 5
colors[0] = 'crimson'

fig = go.Figure(data=[go.Bar(
    x = df['weekday'].value_counts().index,
    y = df['weekday'].value_counts(),
    marker_color=colors # marker color can be a single color value or an iterable
)])
fig.update_layout(title_text='High Sales of Uber Trip')

plt.hist(df['hour'])
plt.ylabel('frequency')
plt.xlabel('work hour')

plt.figure(figsize=(40,20))
for i,month in enumerate(df['month'].unique()):
  plt.subplot(3,2,i+1)
  df[df['month']==month]['hour'].hist()

"""Analysing Monthly Rides"""

import plotly.graph_objects as go
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot

df.groupby('month')['hour'].count()

fig = go.Figure(data=[go.Bar(
    x = df.groupby('month')['hour'].count().index,
    y = df.groupby('month')['hour'].count(),
    #marker_color=colors # marker color can be a single color value or an iterable
)])
fig.update_layout(title_text='The Highest Monthly Ride')

plt.figure(figsize=(10,8))
plt.hist(df['day'],bins=30,rwidth=0.8,range=(0.5,30.5))
plt.xlabel('date of the month')
plt.ylabel('Total Journeys')
plt.title('Journeys by Month Day')

plt.figure(figsize=(20,12))
for i, month in enumerate(df['month'].unique(),1):
  plt.subplot(3,2,i)
  df_out=df[df['month']==month]
  plt.hist(df_out['day'])
  plt.xlabel('day in month {}'.format(month))
  plt.ylabel('total rides')

"""Analysing rush in hour"""

ax=sns.pointplot(x='hour',y='Lat', data=df, hue='weekday')
ax.set_title('hoursoffday vs latitude of passenger')

"""Performing Cross Analysis"""

base=df.groupby(['Base','month'])['Date/Time'].count().reset_index()
base

plt.figure(figsize=(10,6))
ax = sns.lineplot(x='month',y='Date/Time', hue='Base',data=base)
ax.set_title('Popular Base Number by Month')

"""Perform Cross Analysis Through our exploration we are going to vizualize:


Heatmap by hour and weekday

Heatmap by hour and day

Heatmap by month and day

Heatmap by month and weekday
"""

#Heatmap by hour and weekday
def count_rows(rows):
  return len(rows)
by_cross = df.groupby(['weekday','hour']).apply(count_rows)
by_cross

pivot=by_cross.unstack()
pivot

plt.figure(figsize=(15,8))
sns.heatmap(pivot)

#Heatmap by hour and day, month and day, month and weekday
def heatmap(col1, col2):
  by_cross = df.groupby([col1,col2]).apply(count_rows)
  pivot=by_cross.unstack()
  plt.figure(figsize=(15,8))
  return sns.heatmap(pivot)

#Heatmap by hour and day
heatmap('day','hour')

#Heatmap by month and day
heatmap('day','month')

#Heatmap by month and weekday
heatmap('weekday', 'month')

"""Performs Spatial Anaysis on Demand of Uber"""

plt.figure(figsize=(12,6))
plt.plot(df['Lon'],df['Lat'],'r+',ms=0.5)
plt.xlim(-74.2,-73.7)
plt.ylim(40.6,41)

df_out=df[df['weekday']=='Sunday']
df_out

rush=df_out.groupby(['Lat','Lon'])['weekday'].count().reset_index()
rush.columns=['Lat','Lon','no of trips']
rush

"""Analysing Uber Pickup on Each Month"""

uber_15=pd.read_csv(r'/content/drive/MyDrive/Data for Uber/uber-raw-data-janjune-15.csv')

uber_15.head()

uber_15.dtypes

uber_15['Pickup_date']=pd.to_datetime(uber_15['Pickup_date'], format='%Y-%m-%d %H:%M:%S')

uber_15.dtypes

uber_15['weekday']=uber_15['Pickup_date'].dt.day_name()
uber_15['day']=uber_15['Pickup_date'].dt.day
uber_15['minute']=uber_15['Pickup_date'].dt.minute
uber_15['month']=uber_15['Pickup_date'].dt.month
uber_15['hour']=uber_15['Pickup_date'].dt.hour

uber_15.head()

px.bar(x=uber_15['month'].value_counts().index,
       y=uber_15['month'].value_counts())

"""Analysing Rush in New York City"""

plt.figure(figsize=(12,6))
sns.countplot(uber_15['hour'])
plt.title("Rush in New York City")

summary=uber_15.groupby(['weekday','hour'])['Pickup_date'].count().reset_index()
summary

summary.columns=['weekday','hour','count']
summary.head()

plt.figure(figsize=(12,8))
sns.pointplot(x='hour',y='count',hue='weekday',data=summary)

"""Perform in Depth Analysis of Uber Base Number"""

uber_foil=pd.read_csv(r'/content/drive/MyDrive/Data for Uber/Uber-Jan-Feb-FOIL.csv')

uber_foil.head()

uber_foil.dtypes

uber_foil['dispatching_base_number'].unique()

plt.figure(figsize=(12,10))
sns.boxplot(x='dispatching_base_number',y='active_vehicles', data=uber_foil)

plt.figure(figsize=(12,10))
sns.boxplot(x='dispatching_base_number', y='trips', data=uber_foil)

#define trips.vehicle
uber_foil['trips/vehicle']=uber_foil['trips']/uber_foil['active_vehicles']

uber_foil.head()

plt.figure(figsize=(12,6))
uber_foil.set_index('date').groupby(['dispatching_base_number'])['trips/vehicle'].plot()
plt.ylabel('Average trips/vehicle')
plt.title('Demand vs Supply Chart')
plt.legend()

"""# END OF THE SCRIPTS"""